import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, Alert } from 'react-native';
import { TextInput, Button, DataTable, IconButton, Portal, Dialog, Provider } from 'react-native-paper';
import { collection, addDoc, doc, updateDoc, deleteDoc, getDocs } from 'firebase/firestore';
import { db } from '../services/firebaseClient';

export default function TrackingTableSetup() {
  // Estados para manejar la creación y edición de mesas
  const [tables, setTables] = useState([]);
  const [loading, setLoading] = useState(true);
  const [tableNumber, setTableNumber] = useState('');
  const [tableCapacity, setTableCapacity] = useState('');
  const [editingTable, setEditingTable] = useState(null);
  const [dialogVisible, setDialogVisible] = useState(false);

  // Cargar las mesas existentes al montar el componente
  useEffect(() => {
    loadTables();
  }, []);

  // Función para cargar las mesas desde Firestore
  const loadTables = async () => {
    setLoading(true);
    try {
      const tablesCollection = collection(db, 'tables');
      const snapshot = await getDocs(tablesCollection);
      const tableList = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setTables(tableList);
    } catch (error) {
      console.error('Error al cargar mesas:', error);
      Alert.alert('Error', 'No se pudieron cargar las mesas');
    } finally {
      setLoading(false);
    }
  };

  // Función para crear o actualizar una mesa
  const saveTable = async () => {
    if (!tableNumber || !tableCapacity) {
      Alert.alert('Error', 'Por favor complete todos los campos');
      return;
    }

    try {
      const tableData = {
        number: parseInt(tableNumber, 10),
        capacity: parseInt(tableCapacity, 10),
        status: 'available', // Estado inicial: disponible
        lastUpdated: new Date().toISOString()
      };

      if (editingTable) {
        // Actualizar mesa existente
        await updateDoc(doc(db, 'tables', editingTable.id), tableData);
        Alert.alert('Éxito', 'Mesa actualizada correctamente');
      } else {
        // Crear nueva mesa
        await addDoc(collection(db, 'tables'), tableData);
        Alert.alert('Éxito', 'Mesa creada correctamente');
      }
      
      // Resetear formulario y recargar datos
      resetForm();
      loadTables();
    } catch (error) {
      console.error('Error al guardar mesa:', error);
      Alert.alert('Error', 'No se pudo guardar la mesa');
    }
  };

  // Función para editar una mesa existente
  const editTable = (table) => {
    setEditingTable(table);
    setTableNumber(String(table.number));
    setTableCapacity(String(table.capacity));
  };

  // Función para confirmar la eliminación de una mesa
  const confirmDeleteTable = (table) => {
    setEditingTable(table);
    setDialogVisible(true);
  };

  // Función para eliminar una mesa
  const deleteTable = async () => {
    if (!editingTable) return;
    
    try {
      await deleteDoc(doc(db, 'tables', editingTable.id));
      setDialogVisible(false);
      resetForm();
      loadTables();
      Alert.alert('Éxito', 'Mesa eliminada correctamente');
    } catch (error) {
      console.error('Error al eliminar mesa:', error);
      Alert.alert('Error', 'No se pudo eliminar la mesa');
    }
  };

  // Resetear el formulario
  const resetForm = () => {
    setTableNumber('');
    setTableCapacity('');
    setEditingTable(null);
  };

  return (
    <Provider>
      <ScrollView style={styles.container}>
        <View style={styles.formContainer}>
          <Text style={styles.title}>Configuración de Mesas</Text>
          
          <TextInput
            label="Número de Mesa"
            value={tableNumber}
            onChangeText={setTableNumber}
            keyboardType="numeric"
            style={styles.input}
          />
          
          <TextInput
            label="Capacidad"
            value={tableCapacity}
            onChangeText={setTableCapacity}
            keyboardType="numeric"
            style={styles.input}
          />
          
          <View style={styles.buttonContainer}>
            <Button 
              mode="contained" 
              onPress={saveTable}
              style={styles.button}
            >
              {editingTable ? 'Actualizar Mesa' : 'Crear Mesa'}
            </Button>
            
            {editingTable && (
              <Button 
                mode="outlined" 
                onPress={resetForm}
                style={styles.button}
              >
                Cancelar
              </Button>
            )}
          </View>
        </View>

        <View style={styles.tableContainer}>
          <Text style={styles.subtitle}>Mesas Existentes</Text>
          
          <DataTable>
            <DataTable.Header>
              <DataTable.Title numeric>N°</DataTable.Title>
              <DataTable.Title numeric>Capacidad</DataTable.Title>
              <DataTable.Title>Estado</DataTable.Title>
              <DataTable.Title>Acciones</DataTable.Title>
            </DataTable.Header>

            {tables.map((table) => (
              <DataTable.Row key={table.id}>
                <DataTable.Cell numeric>{table.number}</DataTable.Cell>
                <DataTable.Cell numeric>{table.capacity}</DataTable.Cell>
                <DataTable.Cell>
                  {table.status === 'available' ? 'Disponible' :
                   table.status === 'occupied' ? 'Ocupada' :
                   table.status === 'reserved' ? 'Reservada' :
                   table.status === 'cleaning' ? 'Limpieza' : 'Desconocido'}
                </DataTable.Cell>
                <DataTable.Cell>
                  <View style={styles.actionsContainer}>
                    <IconButton
                      icon="pencil"
                      size={20}
                      onPress={() => editTable(table)}
                    />
                    <IconButton
                      icon="delete"
                      size={20}
                      onPress={() => confirmDeleteTable(table)}
                    />
                  </View>
                </DataTable.Cell>
              </DataTable.Row>
            ))}
          </DataTable>
          
          {tables.length === 0 && !loading && (
            <Text style={styles.emptyText}>No hay mesas configuradas</Text>
          )}
        </View>

        <Portal>
          <Dialog visible={dialogVisible} onDismiss={() => setDialogVisible(false)}>
            <Dialog.Title>Confirmar eliminación</Dialog.Title>
            <Dialog.Content>
              <Text>¿Está seguro que desea eliminar la mesa {editingTable?.number}?</Text>
            </Dialog.Content>
            <Dialog.Actions>
              <Button onPress={() => setDialogVisible(false)}>Cancelar</Button>
              <Button onPress={deleteTable}>Eliminar</Button>
            </Dialog.Actions>
          </Dialog>
        </Portal>
      </ScrollView>
    </Provider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  formContainer: {
    marginBottom: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  input: {
    marginBottom: 16,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  button: {
    marginRight: 8,
  },
  tableContainer: {
    marginTop: 20,
  },
  actionsContainer: {
    flexDirection: 'row',
  },
  emptyText: {
    textAlign: 'center',
    marginTop: 20,
    color: '#757575',
  },
});
